#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 29 16:07:09 2019

@author: anatolechouard
"""

from scipy.integrate import nquad
from mpl_toolkits import mplot3d
import math
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
from scipy.integrate import quad, dblquad
import time

fact=10
poids=1 #poids de Student

'_______________________________________________________________________________'

'1. Fonction de distribution'

def distrib_2D(x,y):
    return (1/((2*fact)+1))*(fact*(1/(2*np.pi))*math.e**(((-((x-0)**2))/2)-(((y-0)**2)/2))+fact*(1/(2*np.pi))*math.e**(((-((x-10)**2))/2)-(((y-0)**2)/2))+(1/(2*np.pi))*math.e**(((-((x-0)**2))/2)-(((y-10)**2)/2)))
    
def integrale_distrib_2D(): #pour verifier que l'integrale vaut 1
    return dblquad(distrib_2D, -10, 20, lambda x: -10, lambda x: 20)[0]

def distrib_2D_2(y,x): #pour pouvoir integrer selon x ou y facilement ensuite (astuce)
    return distrib_2D(x,y)

'_______________________________________________________________________________'

'2. Plot de la fct de distribution'

'2.1 Distirbution exacte'

def plot_distribution_2D(prec): #prec(=100) : precision de la grille 2D
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    Z=distrib_2D(X,Y)
    
    fig = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    ax.contour3D(X, Y, Z, prec, cmap='binary')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('distribution 2D')
#    fig.colorbar(Z, shrink=0.5, aspect=5)    
    ax.view_init(45, 300)
    plt.show(fig)

'2.2 kde de la distribution sous pi invariant'


#1. x0 sous pi invariant
def pi_invariant_2D():
    rand=(1+2*fact)*np.random.rand()
    if (rand<1):
        x0=np.random.normal(0, 1, 1)[0]
        y0=np.random.normal(10,1, 1)[0]
    elif (rand<(1+fact)):
        x0=np.random.normal(0, 1, 1)[0]
        y0=np.random.normal(0, 1, 1)[0]        
    else:
        x0=np.random.normal(10,1, 1)[0]
        y0=np.random.normal(0, 1, 1)[0]        
    return (x0,y0)

def tab_distribution(nb): #donne un tableau pour pouvoir ensuite appliquer le kde 
    TAB=[]
    tab_x=[]
    tab_y=[]
    for i in range(nb):
        p=pi_invariant_2D()
        tab_x+=[p[0]]
        tab_y+=[p[1]]
    TAB+=[tab_x]
    TAB+=[tab_y] 
    return TAB

def kde_distribution(nb,prec):
    
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    positions = np.vstack([X.ravel(), Y.ravel()])  
    
    TAB=tab_distribution(nb)

    kernel = stats.gaussian_kde(TAB)

    def fonction_kernel(x,y):
        return kernel.evaluate([x,y])[0]

    Z= np.reshape(kernel(positions).T, X.shape)   
    
    fig = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    ax.contour3D(X, Y, Z, prec, cmap='binary')     
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('distribution 2D')
#    fig.colorbar(Z, shrink=0.5, aspect=5) #colorbar bug !
    ax.view_init(45, 300)
    plt.show(fig)

'_______________________________________________________________________________'

'3.1 Algorithme de Metropolis-Hastings classique'

def MH_2D(N,k,x0,y0): #renvoie un tableau des coordonnees des points acceptes par Metropolis-Hastings
    
    x=x0 #x de depart
    y=y0 #y de depart
    samples=[[x0],[y0]]
        
    f=distrib_2D(x,y)
    
    compteur_x=0
    compteur_y=0
    
    for i in range(N-1):
        
        #MH pour x
        prop_x=x+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k
        f=distrib_2D(x,y)
        f2=distrib_2D(prop_x,y)
        if (f>f2):
            u=np.random.rand()
            if u<(f2/f):
                f=f2
                x=prop_x
                compteur_x+=1
                samples[0]+=[x]

            else:
                samples[0]+=[x+(np.random.rand())*10**(-10)]

        else:
            f=f2
            x=prop_x
            compteur_x+=1
            samples[0]+=[x]

            
        #MH pour y
        prop_y=y+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k
        f=distrib_2D(x,y)
        f2=distrib_2D(x,prop_y)
        if (f>f2):
            u=np.random.rand()
            if u<(f2/f):
                f=f2
                y=prop_y
                compteur_y+=1
                samples[1]+=[y]
            else:
                samples[1]+=[y+(np.random.rand())*10**(-10)]
        else:
            f=f2
            y=prop_y
            compteur_y+=1
            samples[1]+=[y]
        
#    pourcentage_x=(compteur_x/N)*100
#    pourcentage_y=(compteur_y/N)*100
#    pourcentage=(pourcentage_x+pourcentage_y)/2   
#    print(pourcentage)
    
    return samples


def MH2_2D(N,k,x0,y0,nb): #donne les nb coordonnes (x,y) des points numeros N-1
#    start = time.time()   
    T=[[],[]]  
    for i in range(nb):
#        print(i)
        TABLEAU=MH_2D(N,k,x0,y0)
        T[0]+=[TABLEAU[0][-1]]
        T[1]+=[TABLEAU[1][-1]]  
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T

def MH3_2D(N,k,x0,y0,nb): #donne les nb coordonnes (x,y) des tous les points de 0 Ã  N-1
#    start = time.time()   
    T=[] 
    for i in range(nb):
#        print(i)
        TABLEAU=MH_2D(N,k,x0,y0)
#        print(TABLEAU)
        T+=[TABLEAU]
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T

'3.2. MH invariant'

def MH_2D_inv(N,k): #renvoie un tableau des coordonnees des points acceptes par Metropolis-Hastings

    p=pi_invariant_2D()
    x=p[0]
    y=p[1]
    samples=[[x],[y]]
        
    f=distrib_2D(x,y)
    
    compteur_x=0
    compteur_y=0
    
    for i in range(N-1):
        
        #MH pour x
        prop_x=x+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k
        f=distrib_2D(x,y)
        f2=distrib_2D(prop_x,y)
        if (f>f2):
            u=np.random.rand()
            if u<(f2/f):
                f=f2
                x=prop_x
                compteur_x+=1
                samples[0]+=[x]

            else:
                samples[0]+=[x+(np.random.rand())*10**(-10)]

        else:
            f=f2
            x=prop_x
            compteur_x+=1
            samples[0]+=[x]

            
        #MH pour y
        prop_y=y+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k
        f=distrib_2D(x,y)
        f2=distrib_2D(x,prop_y)
        if (f>f2):
            u=np.random.rand()
            if u<(f2/f):
                f=f2
                y=prop_y
                compteur_y+=1
                samples[1]+=[y]
            else:
                samples[1]+=[y+(np.random.rand())*10**(-10)]
        else:
            f=f2
            y=prop_y
            compteur_y+=1
            samples[1]+=[y]
        
#    pourcentage_x=(compteur_x/N)*100
#    pourcentage_y=(compteur_y/N)*100
#    pourcentage=(pourcentage_x+pourcentage_y)/2   
#    print(pourcentage)
    
    return samples

def MH2_2D_inv(N,k,nb): #donne les nb coordonnes (x,y) des points numeros N-1
#    start = time.time()   
    T=[[],[]]  
    for i in range(nb):
#        print(i)
        TABLEAU=MH_2D_inv(N,k)
        T[0]+=[TABLEAU[0][-1]]
        T[1]+=[TABLEAU[1][-1]]  
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T

def MH3_2D_inv(N,k,nb): #donne les nb coordonnes (x,y) des points numeros N-1
#    start = time.time()   
    T=[] 
    for i in range(nb):
#        print(i)
        TABLEAU=MH_2D_inv(N,k)
#        print(TABLEAU)
        T+=[TABLEAU]
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T


'_______________________________________________________________________________'

'3.3 Algorithme de Metropolis-Hastings LOCALLY INFORMED : MH_LI'

def MH_LI_2D(N,k,x0,y0):#renvoie un tableau des coordonnees des points acceptes par Metropolis-Hastings
#    start = time.time()
    
#    N=2*N #multiplier N par 2 pour avoir le meme N nombre de propositions que MH normal

    x=x0 #x de depart
    y=y0 #y de depart
    samples=[[x0],[y0]]
        
    f=distrib_2D(x,y)
    
    compteur_x=0
    compteur_y=0
    
#    print('poids en (0,0)')
#    print(quad(distrib_2D,-np.inf,np.inf,args=(0,))[0])
#    print(quad(distrib_2D_2,-np.inf,np.inf,args=(0,))[0])
     
    #integrale selon x, y fixe
    int1=quad(distrib_2D,-np.inf,np.inf,args=(y,))[0]

    #integrale selon y, x fixe
    int2=quad(distrib_2D_2,-np.inf,np.inf,args=(x,))[0] 
    
    #rapport des integrales :
    rap_int=int1/(int1+int2)   
    
    for i in range(N-1):
    
        rand=np.random.rand()
        
        if (rap_int>rand): #on modifie alors x
        
            #MH pour x
            prop_x=x+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k
#            prop_x=x+poids*np.random.normal(0,1) #proposition avec loi normale

            f=distrib_2D(x,y)
            f2=distrib_2D(prop_x,y)
            
            #meme integrale selon x            
            int1_bis=int1
            #nouvelle integrale selon y
            int2_bis=quad(distrib_2D_2,-20,20,args=(prop_x,))[0]
                                    
            rap_int_bis=(int1_bis/(int1_bis+int2_bis))

            if ((f*rap_int)>(f2*rap_int_bis)):
                u=np.random.rand()
                if u<((f2*rap_int_bis)/(f*rap_int)):
                    f=f2
                    x=prop_x
                    rap_int=rap_int_bis
                    compteur_x+=1
                    samples[0]+=[x]

                else:
                    samples[0]+=[x+(np.random.rand())*10**(-10)]
            else:
                f=f2
                x=prop_x
                rap_int=rap_int_bis
                compteur_x+=1
                samples[0]+=[x]
                
            int2=int2_bis
            rap_int=int1/(int1+int2)
            
            samples[1]+=[y+(np.random.rand())*10**(-10)]


                
        else : #on modifie alors y
            
            #MH pour y
            rand=np.random.standard_t(k)
            if ((rand<20) and (rand>-20)):
                prop_y=y+poids*rand #proposition avec loi de student de parametre k
            else:
                prop_y=y+poids*10*np.random.normal(0,1)

            f=distrib_2D(x,y)
            f2=distrib_2D(x,prop_y)
            
            #meme integrale selon y
            int2_bis=int2     
            #nouvelle integrale selon x
            int1_bis=quad(distrib_2D,-20,20,args=(prop_y,))[0]       
            
            rap_int_bis=(int1_bis/(int1_bis+int2_bis))

            if ((f*rap_int)>(f2*rap_int_bis)):
                u=np.random.rand()
                if u<((f2*rap_int_bis)/(f*rap_int)):
                    f=f2
                    y=prop_y
                    compteur_y+=1
                    samples[1]+=[y]

                else:
                    samples[1]+=[y+(np.random.rand())*10**(-10)]

            else:
                f=f2
                y=prop_y
                rap_int=rap_int_bis
                compteur_y+=1
                samples[1]+=[y]

            samples[0]+=[x+(np.random.rand())*10**(-10)]
            int1=int1_bis
            rap_int=int1/(int1+int2)

#verifier si on a deux fois le meme point :      
#    compteur=0
#    for i in range(len(samples[0])-1):
#        if (samples[0][i]==samples[0][i+1]):
#            compteur+=1
#    print('compteur')
#    print(compteur)
                
#    pourcentage_x=(compteur_x/N)*100
#    pourcentage_y=(compteur_y/N)*100
#    pourcentage=(pourcentage_x+pourcentage_y)/2
#    print(pourcentage) 
                
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return samples


def MH2_LI_2D(N,k,x0,y0,nb): #donne les nb coordonnes (x,y) des points numeros N-1
#    start = time.time()    
    T=[[],[]]   
    for i in range(nb):
        print(i)
        TABLEAU=MH_LI_2D(N,k,x0,y0)
        T[0]+=[TABLEAU[0][-1]]
        T[1]+=[TABLEAU[1][-1]]  
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T

'3.4. MH LI invariant'

def MH_LI_2D_inv(N,k):#renvoie un tableau des coordonnees des points acceptes par Metropolis-Hastings
#    start = time.time()
    
    #    N=2*N #multiplier N par 2 pour avoir le meme N nombre de propositions que MH normal
    p=pi_invariant_2D()
    x=p[0]
    y=p[1]
    samples=[[x],[y]]
        
    f=distrib_2D(x,y)

    
    compteur_x=0
    compteur_y=0
    
#    print('poids en (0,0)')
#    print(quad(distrib_2D,-np.inf,np.inf,args=(0,))[0])
#    print(quad(distrib_2D_2,-np.inf,np.inf,args=(0,))[0])
     
    #integrale selon x, y fixe
    int1=quad(distrib_2D,-np.inf,np.inf,args=(y,))[0]

    #integrale selon y, x fixe
    int2=quad(distrib_2D_2,-np.inf,np.inf,args=(x,))[0] 
    
    #rapport des integrales :
    rap_int=int1/(int1+int2)   
    
    for i in range(N-1):
    
        rand=np.random.rand()
        
        if (rap_int>rand): #on modifie alors x
        
            #MH pour x
            prop_x=x+poids*np.random.standard_t(k) #proposition avec loi de student de parametre k

            f=distrib_2D(x,y)
            f2=distrib_2D(prop_x,y)
            
            #meme integrale selon x            
            int1_bis=int1
            #nouvelle integrale selon y
            int2_bis=quad(distrib_2D_2,-np.inf,np.inf,args=(prop_x,))[0]
                                    
            rap_int_bis=(int1_bis/(int1_bis+int2_bis))

            if ((f*rap_int)>(f2*rap_int_bis)):
                u=np.random.rand()
                if u<((f2*rap_int_bis)/(f*rap_int)):
                    f=f2
                    x=prop_x
                    rap_int=rap_int_bis
                    compteur_x+=1
                    samples[0]+=[x]

                else:
                    samples[0]+=[x+(np.random.rand())*10**(-10)]
            else:
                f=f2
                x=prop_x
                rap_int=rap_int_bis
                compteur_x+=1
                samples[0]+=[x]
                
            int2=int2_bis
            rap_int=int1/(int1+int2)
            
            samples[1]+=[y+(np.random.rand())*10**(-10)]


                
        else : #on modifie alors y
            
            #MH pour y
            rand=np.random.standard_t(k)
            if ((rand<20) and (rand>-20)):
                prop_y=y+poids*rand #proposition avec loi de student de parametre k
            else:
                prop_y=y+poids*10*np.random.normal(0,1)
                
            f=distrib_2D(x,y)
            f2=distrib_2D(x,prop_y)
            
            #meme integrale selon y
            int2_bis=int2     
            #nouvelle integrale selon x
            int1_bis=quad(distrib_2D,-np.inf,np.inf,args=(prop_y,))[0]       
            
            rap_int_bis=(int1_bis/(int1_bis+int2_bis))

            if ((f*rap_int)>(f2*rap_int_bis)):
                u=np.random.rand()
                if u<((f2*rap_int_bis)/(f*rap_int)):
                    f=f2
                    y=prop_y
                    compteur_y+=1
                    samples[1]+=[y]

                else:
                    samples[1]+=[y+(np.random.rand())*10**(-10)]

            else:
                f=f2
                y=prop_y
                rap_int=rap_int_bis
                compteur_y+=1
                samples[1]+=[y]

            int1=int1_bis
            rap_int=int1/(int1+int2)
            
            samples[0]+=[x+(np.random.rand())*10**(-10)]


#verifier si on a deux fois le meme point :      
#    compteur=0
#    for i in range(len(samples[0])-1):
#        if (samples[0][i]==samples[0][i+1]):
#            compteur+=1
#    print('compteur')
#    print(compteur)
                
#    pourcentage_x=(compteur_x/N)*100
#    pourcentage_y=(compteur_y/N)*100
#    pourcentage=(pourcentage_x+pourcentage_y)/2
#    print(pourcentage) 
                
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return samples


def MH2_LI_2D_inv(N,k,nb): #donne les nb coordonnes (x,y) des points numeros N-1
#    start = time.time()    
    T=[[],[]]   
    for i in range(nb):
#        print(i)
        TABLEAU=MH_LI_2D_inv(N,k)
        T[0]+=[TABLEAU[0][-1]]
        T[1]+=[TABLEAU[1][-1]]  
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T

def MH3_LI_2D_inv(N,k,nb): #donne les nb coordonnes (x,y) des tous les points de 0 Ã  N-1
#    start = time.time()   
    T=[] 
    for i in range(nb):
#        print(i)
        TABLEAU=MH_LI_2D_inv(N,k)
#        print(TABLEAU)
        T+=[TABLEAU]
#    end = time.time()
#    print('execution time :')
#    print(end - start)
    return T
'_______________________________________________________________________________'

'4. Erreur integrale du estimator en norme TV : kde'

'4.1 : kde de MH classique'

def kde_MH_2D(N,k,x0,y0,nb,prec): #prec=100 : precision en x et en y, ie maillage fin ou non
    start = time.time()
    
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    positions = np.vstack([X.ravel(), Y.ravel()])
    
    values = MH2_2D(N,k,x0,y0,nb)
    print(values)
    kernel = stats.gaussian_kde(values)
    Z = np.reshape(kernel(positions).T, X.shape)
    
    fig = plt.figure(figsize=(11,7))
    ax = plt.axes(projection='3d') 
    ax.contour3D(X, Y, Z, 50, cmap='binary')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    surface = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('Surface de la KDE')
    fig.colorbar(surface, shrink=0.5, aspect=5)  
    ax.view_init(45, 300)
    
    end = time.time()
    print('execution time :')
    print(end - start)
    
    plt.show(fig)
    


'4.2 kde de MH LI'

def kde_MH_LI_2D(N,k,x0,y0,nb,prec): #prec=100 : precision en x et en y, ie maillage fin ou non
    start = time.time()
    
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    positions = np.vstack([X.ravel(), Y.ravel()])

    values = MH2_LI_2D(N,k,x0,y0,nb)
    kernel = stats.gaussian_kde(values)
    Z = np.reshape(kernel(positions).T, X.shape)
    
    fig = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    ax.contour3D(X, Y, Z, prec, cmap='binary')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    surface = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('Surface de la KDE')
    fig.colorbar(surface, shrink=0.5, aspect=5)
    ax.view_init(45, 300)
    
    end = time.time()
    print('execution time :')
    print(end - start)
    
    plt.show(fig)
    
'_______________________________________________________________________________'

'5. Plot et calcul : integrale de estimator, ie la difference entre la distribution et le kde' 

def erreur_MH_2D(N,k,x0,y0,nb):
    
    TAB1 = tab_distribution(nb)
    kernel1 = stats.gaussian_kde(TAB1)
    
    TAB2 = MH2_2D(N,k,x0,y0,nb)
    kernel2 = stats.gaussian_kde(TAB2)
    
    def fonction_kernel1(x,y):
        return kernel1.evaluate([x,y])[0]         
      
    def fonction_kernel2(x,y):
        return kernel2.evaluate([x,y])[0] 
    
    def difference(x,y):
        return abs(fonction_kernel1(x,y)-fonction_kernel2(x,y))
    
#    erreur=dblquad(difference, -np.inf, np.inf, lambda x: -np.inf, lambda x: np.inf)
#    erreur=dblquad(difference, -10, 20, lambda x: -10, lambda x: 20)
#    return erreur    

    options={'limit':10}
    integral=nquad(difference,[[-10,20],[-10,20]],opts=[options,options])

    return integral

 
def plot_erreur_MH_2D(N,k,x0,y0,nb,prec):
    
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    positions = np.vstack([X.ravel(), Y.ravel()])

    TAB1 = tab_distribution(nb)
    kernel1 = stats.gaussian_kde(TAB1)
    
    TAB2 = MH2_2D(N,k,x0,y0,nb)
    kernel2 = stats.gaussian_kde(TAB2)

    Z1 = np.reshape(kernel1(positions).T, X.shape)  
    Z2 = np.reshape(kernel2(positions).T, X.shape)
    Z=abs(Z1-Z2)
   
    fig = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    
    ax.contour3D(X, Y, Z, prec, cmap='binary')   
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('difference 2D')
#    fig.colorbar(Z, shrink=0.5, aspect=5) #colorbar bug
    ax.view_init(45, 300)
    plt.show(fig)

####fig1
    
    fig1 = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    ax.contour3D(X, Y, Z1, prec, cmap='binary')     
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z1, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('distribution 2D')
#    fig.colorbar(Z1, shrink=0.5, aspect=5) #colorbar bug
    ax.view_init(45, 300)
    plt.show(fig1)

####fig2
    
    fig2 = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')  
    ax.contour3D(X, Y, Z2, prec, cmap='binary') 
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z2, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('MH 2D')
#    fig.colorbar(Z2, shrink=0.5, aspect=5) #colorbar bug
    ax.view_init(45, 300)
    plt.show(fig2)
    
#    erreur=dblquad(difference, -np.inf, np.inf, lambda x: -np.inf, lambda x: np.inf)
#    erreur=dblquad(difference, -10, 20, lambda x: -10, lambda x: 20)
#    return erreur


def erreur_MH_LI_2D(N,k,x0,y0,nb):
    
    TAB1 = tab_distribution(nb)
    kernel1 = stats.gaussian_kde(TAB1)
    
    TAB2 = MH2_LI_2D(N,k,x0,y0,nb)
    kernel2 = stats.gaussian_kde(TAB2)
    
    def fonction_kernel1(x,y):
        return kernel1.evaluate([x,y])[0]         
      
    def fonction_kernel2(x,y):
        return kernel2.evaluate([x,y])[0] 
    
    def difference(x,y):
        return abs(fonction_kernel1(x,y)-fonction_kernel2(x,y))
    
    options={'limit':10}
    integral=nquad(difference,[[-10,20],[-10,20]],opts=[options,options])
    
    return integral

def plot_erreur_MH_LI_2D(N,k,x0,y0,nb,prec):
    
    x=np.linspace(-5,15,prec)
    y=np.linspace(-5,15,prec)
    X,Y=np.meshgrid(x,y) #grid 2D en combinant les deux grid 1D
    positions = np.vstack([X.ravel(), Y.ravel()])

    TAB1 = tab_distribution(nb)
    kernel1 = stats.gaussian_kde(TAB1)
    
    TAB2 = MH2_LI_2D(N,k,x0,y0,nb)
    kernel2 = stats.gaussian_kde(TAB2)

    Z1 = np.reshape(kernel1(positions).T, X.shape)  
    Z2 = np.reshape(kernel2(positions).T, X.shape)
    Z=abs(Z1-Z2)
   
    fig = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    
    ax.contour3D(X, Y, Z, prec, cmap='binary')   
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('difference 2D')
#    fig.colorbar(Z, shrink=0.5, aspect=5) #colorbar bug !
    ax.view_init(45, 300)
    plt.show(fig)

####fig1
    
    fig1 = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')
    ax.contour3D(X, Y, Z1, prec, cmap='binary')     
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z1, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('distribution 2D')
#    fig.colorbar(Z1, shrink=0.5, aspect=5) #colorbar bug !
    ax.view_init(45, 300)
    plt.show(fig1)

####fig2
    
    fig2 = plt.figure(figsize=(10,7))
    ax = plt.axes(projection='3d')  
    ax.contour3D(X, Y, Z2, prec, cmap='binary') 
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.plot_surface(X, Y, Z2, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none')
    ax.set_title('MH LI 2D')
#    fig.colorbar(Z2, shrink=0.5, aspect=5) #colorbar bug !
    ax.view_init(45, 300)
    plt.show(fig2)
    
#    erreur=dblquad(difference, -np.inf, np.inf, lambda x: -np.inf, lambda x: np.inf)
#    erreur=dblquad(difference, -10, 20, lambda x: -10, lambda x: 20)
#    return erreur
#    return TAB2
    
    
'_______________________________________________________________________________'

'8. Variance asymptotique'

#1. fixer une fct f : f(x,y)=(x+y)**2 par exemple  
def f(x,y):
    return (x+y)**2

#2.1 Variance asymptotique MH
def variance_2D(N,k,nb):
    TABLEAU=MH3_2D_inv(N,k,nb)
#    print('TABLEAU')
#    print(TABLEAU)
    tab_sommes=[]    
    for i in range(nb):
        s=0
        for j in range(N):
            s+=f(TABLEAU[i][0][j],TABLEAU[i][1][j])
        tab_sommes+=[s/N]
#    print('tab_sommes')
#    print(tab_sommes)
    return np.var(tab_sommes)
#    return N*np.var(tab_sommes)

#2.2 Variance asymptotique, tableau en entree
    
def variance_LI_2D(N,k,nb):
    TABLEAU=MH3_LI_2D_inv(N,k,nb)
#    print('TABLEAU')
#    print(TABLEAU)
    tab_sommes=[]    
    for i in range(nb):
        s=0
        for j in range(N):
            s+=f(TABLEAU[i][0][j],TABLEAU[i][1][j])
        tab_sommes+=[s/N]
#    print('tab_sommes')
#    print(tab_sommes)
    return np.var(tab_sommes)
#    return N*np.var(tab_sommes)


#3. Graphe variance asymptotique en fonction de N
def graphe_variance_N_2D(k,nb,nbN,Nf,Nl):
    tabN=[] #N en abscisse
    tabVariance=[] #variance en ordonnee
    tabVarianceLI=[]
    for j in range(nbN):
        N=int(Nf+((Nl-Nf)/nbN)*j)
        print(N)
        tabN+=[N]
#        print(tabN)
        tabVariance+=[variance_2D(N,k,nb)]
        tabVarianceLI+=[variance_LI_2D(2*N,k,nb)]
        print(tabVariance)
        print(tabVarianceLI)
    plt.figure()
    plt.plot(tabN,tabVariance,label='variance MH', color="orange")
    plt.plot(tabN,tabVarianceLI,label='variance MH LI', color="b")
    plt.grid()
    plt.legend()
    plt.title('Graphe : Variance asymptotique en fonction de N 2D, k={}, nb={}'.format(k,nb))
    plt.savefig('graphe_variance_N_2D.png',bbox_inches='tight')
    plt.show()
    plt.close()
    return (tabVariance,tabVarianceLI)

#3. Graphe variance asymptotique LI en fonction de N,
def graphe_variance_LI_N_2D(k,nb,nbN,Nf,Nl):
    tabN=[] #N en abscisse
    tabVariance=[] #variance en ordonnee
    
    for j in range(nbN):
        N=int(Nf+((Nl-Nf)/nbN)*j)
        print(N)
        tabN+=[N]
        print(tabN)
        tabVariance+=[variance_LI_2D(N,k,nb)]
    plt.figure()
    plt.plot(tabN,tabVariance)
    plt.grid()
    plt.title('Graphe : Variance asymptotique en fonction de N 2D, k={}, nb={}'.format(k,nb))
    plt.savefig('graphe_variance_N_2D.png',bbox_inches='tight')
    plt.show()
    plt.close()
    return tabVariance


#4.1 ESJD
def ESJD_2D(N,k,nb):
    TABLEAU=MH3_2D_inv(N,k,nb)
#    print('TABLEAU')
#    print(TABLEAU)
    ESJD=0
    for i in range(nb):
        s=0
        for j in range(N-1):
            s+=math.sqrt(((TABLEAU[i][0][j+1]-TABLEAU[i][0][j])**2)+((TABLEAU[i][1][j+1]-TABLEAU[i][1][j])**2))
        ESJD+=s
    return (ESJD/(N*nb))

#4.2 ESJD LI
def ESJD_LI_2D(N,k,nb):
    TABLEAU=MH3_LI_2D_inv(N,k,nb)
#    print('TABLEAU')
#    print(TABLEAU)
    ESJD=0
    for i in range(nb):
        s=0
        for j in range(N-1):
            s+=math.sqrt(((TABLEAU[i][0][j+1]-TABLEAU[i][0][j])**2)+((TABLEAU[i][1][j+1]-TABLEAU[i][1][j])**2))
        ESJD+=s
    return (ESJD/(N*nb))

#5.1 Graphe ESJD en fonction de N
def graphe_ESJD_N_2D(k,nb,nbN,Nf,Nl):
    tabN=[] #N en abscisse
    tabESJD=[] #ESJD en ordonnee
    tabESJDLI=[]
    
    for j in range(nbN):
        N=int(Nf+((Nl-Nf)/nbN)*j)
        print(N)
        tabN+=[N]
#        print(tabN)
        tabESJD+=[ESJD_2D(N,k,nb)]
        tabESJDLI+=[ESJD_LI_2D(2*N,k,nb)]      
        
    plt.figure()
    plt.plot(tabN,tabESJD,label='ESJD', color="orange")
    plt.plot(tabN,tabESJDLI,label='ESJD LI', color="b")
    plt.grid()
    plt.legend()
    plt.title('Graphe : ESJD en fonction de N 2D, k={}, nb={}'.format(k,nb))
    plt.savefig('graphe_ESJD_N_2D.png',bbox_inches='tight')
    plt.show()
    plt.close()
    return (tabESJD,tabESJDLI)

#5.2 Graphe ESJD LI en fonction de N
def graphe_ESJD_LI_N_2D(k,nb,nbN,Nf,Nl):
    tabN=[] #N en abscisse
    tabESJD=[] #variance en ordonnee
    
    for j in range(nbN):
        N=int(Nf+((Nl-Nf)/nbN)*j)
        print(N)
        tabN+=[N]
        print(tabN)
        tabESJD+=[ESJD_LI_2D(N,k,nb)]
    plt.figure()
    plt.plot(tabN,tabESJD)
    plt.grid()
    plt.title('Graphe : ESJD en fonction de N 2D, k={}, nb={}'.format(k,nb))
    plt.savefig('graphe_ESJD_N_2D.png',bbox_inches='tight')
    plt.show()
    plt.close()
    return tabESJD

#6.1 Graphe erreur en fonction de N : vitesse de convergence
    
def graphe_erreur_N_2D(k,x0,y0,nb,nbN,Nf,Nl):
    tabN=[] #N en abscisse
    tabErreur=[] #variance en ordonnee
    tabErreurLI=[] #variance en ordonnee
    
    for j in range(nbN):
        N=int(Nf+((Nl-Nf)/nbN)*j)
        print('N')
        print(N)
        tabN+=[N]
#        print(tabN)
        tabErreur+=[erreur_MH_2D(N,k,x0,y0,nb)[0]]
        tabErreurLI+=[erreur_MH_LI_2D(2*N,k,x0,y0,nb)[0]]
        print('tabErreur')
        print(tabErreur)
#        print('tabErreurLI')
#        print(tabErreurLI)
        
    plt.figure()
    plt.plot(tabN,tabErreur,label='MH', color="orange")
    plt.plot(tabN,tabErreurLI,label='MH LI', color='b')
    plt.grid()
    plt.legend()
    plt.title('Graphe : Erreur en fonction de N 2D, k={}, x0={}, y0={}, nb={}'.format(k,x0,y0,nb))
    plt.savefig('graphe_erreur_N_2D.png',bbox_inches='tight')
    plt.show()
    plt.close()
    return (tabErreur,tabErreurLI)



#def graphe_erreur_LI_N_2D(k,x0,y0,nb,nbN,Nf,Nl):
#    tabN=[] #N en abscisse
#    tabErreurLI=[] #variance en ordonnee
#    
#    for j in range(nbN):
#        N=int(Nf+((Nl-Nf)/nbN)*j)
#        print(N)
#        tabN+=[N]
#        print(tabN)
#        tabErreurLI+=[erreur_MH_LI_2D(N,k,x0,y0,nb)[0]]
#    plt.figure()
#    plt.plot(tabN,tabErreurLI)
#    plt.grid()
#    plt.title('Graphe : Erreur en fonction de N 2D, k={}, x0={}, y0={}, nb={}'.format(k,x0,y0,nb))
#    plt.savefig('graphe_erreur_N_2D.png',bbox_inches='tight')
#    plt.show()
#    plt.close()
#    return tabErreurLI
    

'''[A FAIRE]
- MH_LI_2D : multiplier N par 2 ?
- 4.1 et 4.2 peut etre a combiner en une seule fonction qui prend en entree une fonction,
  idem pour MH2_2D et MH2_LI_2D
- Verifier si mon integrale double est bonne
- Idee : ecrire distrib_2D(tab) pour pouvoir ecrire distrib_2D(positions)
- integrer entre -10 et 20 (plus rapide) ou entre -inf et inf (plus precis) ?
- colorbar bug !!

- rajouter valeur des variables aux graphes

- GROS PROBLEME : les bosses de la kde sont plus elargies
  que celles de la distribution de base !
- Solution (?) : remplacer kde par histogrammes ?
- PROBELEME : "The maximum number of subdivisions (50) has been achieved"
  quand j'integre des fonctions non integrables : perte de temps !
- Solution (?) : mettre nombre max de subdivision Ã  5 par exemple ?

COULEURS DANS GRAPHE ERREUR !!!
ET l'autre graphe : mettre les deux (MH et MH LI) sur meme graphe !!!
ATTENTION erreur devrait etre inferieure Ã  1, meme environ 0.2

[RAPPORT]
- Mettre un compteur d'acceptation de proposition dans MH et MH LI
pour voir si on a bien une acceptation LI > acceptation MH
'''
